{
  "hash": "369a4d82a9b3fe6c94b8b7acda8d63bb",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Building fully reproducible data science environments for R and Python with ease using nix, rix, and Docker\"\nauthor: \"Bruno Rodrigues\"\nformat:\n  revealjs:\n    embed-resources: true\n    slide-number: true\n    theme: solarized\n    incremental: true\n  pptx:\n    freeze: true\nexecute:\n  echo: true\n---\n\n\n\n\n## Intro: Who am I\n\nBruno Rodrigues, head of the statistics at the Ministry of Research and Higher education in Luxembourg\n\nSlides available online at [https://is.gd/repro_basf](https://is.gd/repro_basf)\n\nCode available at: [https://github.com/b-rodrigues/repro_basf](https://github.com/b-rodrigues/repro_basf)\n\n## Topics I want to talk about\n\n- What I mean by *reproducibility*\n- What is Nix, how it works and its complementary relationship to Docker\n\n-   What I will *not* discuss (but is very useful!):\n    * FP, Git, Documenting, testing and packaging code, build automation\n\n## What I mean by *reproducibility*\n\n-   Ability to recover *exactly* the same results from an analysis\n-   Why would you want that?\n-   Auditing purposes\n-   Updating data (impact should only come from data changes)\n-   Reproducibility as a cornerstone of science\n-   (Work on an immutable dev environment)\n\n## Making our scripts reproducible\n\nWe need to answer these questions\n\n. . .\n\n1. How easy would it be for someone else to rerun the analysis?\n2. How easy would it be to update the project?\n3. How easy would it be to reuse this code for another project?\n4. What guarantee do we have that the output is stable over time?\n\n## Reproducibility is on a continuum (1/2)\n\nHere are the 4 main things influencing an analysis' reproducibility:\n\n-   Version of R used\n-   Versions of packages used\n-   Operating system\n-   Hardware\n\n## Reproducibility is on a continuum (2/2)\n\n![](images/repro_spectrum.png){fig-align=\"center\"}\n\nSource: Peng, Roger D. 2011. \"Reproducible Research in Computational Science.\" Science 334 (6060): 1226--27\n\n## Package versioning with `renv`\n\n- `renv` is commonly used\n- Run `renv::init()` to generate library snapshot as a `renv.lock` file\n\n## What an `renv.lock` file looks like\n\n. . .\n\n```\n{\n\"R\": {\n  \"Version\": \"4.2.2\",\n  \"Repositories\": [\n  {\n   \"Name\": \"CRAN\",\n   \"URL\": \"https://packagemanager.rstudio.com/all/latest\"\n  }\n  ]\n},\n\"Packages\": {\n  \"MASS\": {\n    \"Package\": \"MASS\",\n    \"Version\": \"7.3-58.1\",\n    \"Source\": \"Repository\",\n    \"Repository\": \"CRAN\",\n    \"Hash\": \"762e1804143a332333c054759f89a706\",\n    \"Requirements\": []\n  },\n  \"Matrix\": {\n    \"Package\": \"Matrix\",\n    \"Version\": \"1.5-1\",\n    \"Source\": \"Repository\",\n    \"Repository\": \"CRAN\",\n    \"Hash\": \"539dc0c0c05636812f1080f473d2c177\",\n    \"Requirements\": [\n      \"lattice\"\n    ]\n\n    ***and many more packages***\n```\n\n## Restoring a library using an `renv.lock` file\n\n- `renv.lock` file not just a record\n- Can be used to restore as well!\n- Run `renv::restore()`\n\n## `{renv}` alone is not enough\n\nShortcomings:\n\n. . .\n\n1. Records, but does not restore the version of R\n2. Installation of old packages can fail (due to missing OS-dependencies)\n\n. . .\n\nbut... :\n\n. . .\n\n1. Generating a `renv.lock` file is \"free\"\n2. Provides a blueprint for dockerizing our pipeline\n3. Creates a project-specific library (no interferences)\n\n## Going further with Docker: handling R and system-level dependencies\n\n- Docker is a containerisation tool\n- Docker allows you to build *images* and run *containers* (a container is an instance of an image)\n- Docker images:\n    1. contain all the software and code needed for your project\n    2. are immutable (cannot be changed at run-time)\n    3. can be shared on- and offline\n\n## Without Docker\n\n![](images/without_docker.png){fig-align=\"center\"}\n\n## With Docker\n\n![](images/with_docker.png){fig-align=\"center\"}\n\n## Dockerizing a project (1/3)\n\nDockerizing a project could look like this:\n\n- At image build-time:\n  1. install R and R packages (or use an image that ships R and `renv.lock`)\n  3. copy all scripts to the image\n  4. run the analysis (non-interactively)\n\n- At container run-time:\n  1. copy the outputs of the analysis from the container to your computer\n  2. possible to \"log in\" into a running container to inspect code and outputs\n\n## Dockerizing a project (2/3)\n\n- Restoring packages with `{renv}` can be tricky:\n\n. . .\n\n```\n#> * installing *source* package ‘ModelMetrics’ ...\n#> ** package ‘ModelMetrics’ successfully unpacked and MD5 sums checked\n#> ** using staged installation\n#> ** libs\n#> /usr/bin/clang++ -std=gnu++11 -I\"/opt/R-devel/lib64/R/include\" -DNDEBUG -I'/home/docker/R/Rcpp/include' -I/usr/local/include -fpic -g -O2 -c RcppExports.cpp -o RcppExports.o\n#> /usr/bin/clang++ -std=gnu++11 -I\"/opt/R-devel/lib64/R/include\" -DNDEBUG -I'/home/docker/R/Rcpp/include' -I/usr/local/include -fpic -g -O2 -c auc_.cpp -o auc_.o\n#> auc_.cpp:2:10: fatal error: 'omp.h' file not found\n#> #include\n#> ^~~~~~~\n#> 1 error generated.\n#> make: *** [/opt/R-devel/lib64/R/etc/Makeconf:178: auc_.o] Error 1\n#> ERROR: compilation failed for package ‘ModelMetrics’\n```\n\n## Dockerizing a project (2/3)\n\n- The older the `renv.lock` file, the harder to restore!\n- Gets very complicated if you add Python and/or other tools.\n\n## Dockerizing a project (3/3)\n\n- ALSO! Image build process not reproducible per se,\n  only running containers is\n- YOU need to make sure build process is reproducible\n  (or store the built images)\n  1. Need to fix version of R\n  2. Base image layer becomes unsupported at some point\n\n## Docker conclusion\n\n- Docker is very useful and widely used\n- But the entry cost is high (familiarity with Linux is recommended)\n- Single point of failure (what happens if Docker gets bought, abandoned, etc? **quite unlikely though**)\n- Not actually dealing with reproducibility per se, we're \"abusing\" Docker in a way\n\n## The Nix package manager (1/2)\n\n- Package manager: tool to install and manage *packages*\n\n- Package: any piece of software (not just R packages)\n\n- Example of popular package manager:\n\n. . .\n\n![Google Play Store](images/play_store.png)\n\n## The Nix package manager (2/2)\n\n- For total reproducibility: R, R packages and other dependencies must be managed\n- Nix deals with everything, with one single text file (called a Nix expression)!\n- Nix is a package manager actually focused on reproducible builds\n- These Nix expressions *always* build the exact same output\n\n## A basic Nix expression (1/6)\n\n```\nlet\n  pkgs = import (fetchTarball \"https://github.com/NixOS/nixpkgs/archive/976fa3369d722e76f37c77493d99829540d43845.tar.gz\") {};\n  system_packages = builtins.attrValues {\n    inherit (pkgs) R ;\n  };\nin\n  pkgs.mkShell {\n    buildInputs = [ system_packages ];\n    shellHook = \"R --vanilla\";\n  }\n```\n\nThere's a lot to discuss here!\n\n## A basic Nix expression (2/6)\n\n- Written in the Nix language (not discussed)\n- Defines the repository to use (with a fixed revision)\n- Lists packages to install\n- Defines the output: a development shell\n\n## A basic Nix expression (3/6)\n\n- Software for Nix is defined as a mono-repository of tens of thousands of expressions on GitHub\n- GitHub: we can use any commit to pin package versions for reproducibility!\n- For example, the following commit installs R 4.3.1 and associated packages:\n\n. . .\n\n```\npkgs = import (fetchTarball \"https://github.com/NixOS/nixpkgs/archive/976fa3369d722e76f37c77493d99829540d43845.tar.gz\") {};\n```\n\n- Let's take a look at the [repository](https://github.com/NixOS/nixpkgs)...\n\n## A basic Nix expression (4/6)\n\n- `system_packages`: a variable that lists software to install\n- In this case, only R:\n\n. . .\n\n```\nsystem_packages = builtins.attrValues {\n  inherit (pkgs) R ;\n};\n```\n\n## A basic Nix expression (5/6)\n\n- Finally, we define a shell:\n\n. . .\n\n```\npkgs.mkShell {\n  buildInputs = [ system_packages ];\n  shellHook = \"R --vanilla\";\n}\n```\n\n. . .\n\n- This shell will come with the software defined in `system_packages` (`buildInputs`)\n- And launch `R --vanilla` when started (`shellHook`)\n\n## A basic Nix expression (6/6)\n\n- Writing these expressions requires learning a new language\n- While incredibly powerful, if all we want are per-project reproducible dev shells...\n- ...then `{rix}` will help!\n\n## Nix expressions\n\n- Nix expressions can be used to install software\n- But we will use them to build per-project development shells\n- We will include R, LaTeX packages, or Quarto, Python, Julia....\n- Nix takes care of installing every dependency down to the compiler!\n\n## rix: reproducible development environments with Nix (1/5)\n\n- `{rix}` ([website](https://docs.ropensci.org/rix/)) makes writing Nix\n  expressions easy!\n- Simply use the provided `rix()` function:\n\n. . .\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(rix)\n\nrix(\n  date = \"2025-02-17\",\n  r_pkgs = \"ggplot2\",\n  py_conf = list(\n    py_version = \"3.12\",\n    py_pkgs = c(\"polars\", \"great-tables\")\n  ),\n  overwrite = TRUE\n)\n```\n:::\n\n\n\n\n## rix: reproducible development environments with Nix (2/5)\n\n- `renv.lock` files can also be used as starting points:\n\n. . .\n\n```\nlibrary(rix)\n\nrenv2nix(\n  renv_lock_path = \"path/to/original/renv_project/renv.lock\",\n  project_path = \"path/to/rix_project\",\n  override_r_ver = \"4.4.1\" # <- optional\n)\n\n```\n\n## rix: reproducible development environments with Nix (3/5)\n\n- List required R version and packages\n- Optionally: more system packages, packages hosted on GitHub, or LaTeX packages\n- Optionally: an IDE (RStudio, Radian, VS Code or \"other\")\n- Work interactively in an isolated, project-specific and reproducible environment!\n\n## rix: reproducible development environments with Nix (4/5)\n\n- Time for a demonstration, see `scripts/nix_expressions/docker/`\n- First outside of Docker\n- Then we dockerize\n\n. . .\n\n(you'll find many other examples in the repository)\n\n## rix: reproducible development environments with Nix (5/5)\n\n- Can install specific versions of packages (write `\"dplyr@1.0.0\"`)\n- Can install packages hosted on GitHub\n- Many vignettes to get you started! [See here](https://docs.ropensci.org/rix/articles/)\n\n## Non-interactive use\n\n- `{rix}` makes it easy to run pipelines in the right environment\n- (Little side note: the best tool to build pipelines in R is `{targets}`)\n- See `scripts/nix_expressions/nix_targets_pipeline`\n- Can also run the pipeline like so:\n\n. . .\n\n```\ncd /absolute/path/to/pipeline/ && nix-shell default.nix --run \"Rscript -e 'targets::tar_make()'\"\n```\n\n## Nix and GitHub Actions: running pipelines\n\n- Possible to easily run a `{targets}` pipeline on GitHub actions\n- Simply run `rix::tar_nix_ga()` to generate the required files\n- Commit and push, and watch the actions run!\n- See [here](https://github.com/b-rodrigues/nix_targets_pipeline/tree/master).\n\n## Nix and GitHub Actions: writing papers\n\n- Easy collaboration on papers as well\n- See [here](https://github.com/b-rodrigues/rix_paper/tree/master)\n- Just focus on writing!\n\n## Conclusion\n\n- Very vast and complex topic!\n- At the very least, generate an `renv.lock` file\n- Always possible to rebuild a Docker image in the future (either you, or someone else!)\n- Consider using `{targets}`: not only good for reproducibility, but also an amazing tool all around\n- Long-term reproducibility: must use Nix (with or without Docker) or store Docker images\n- Maybe check out my other packages (in early dev): [`{rixpress}`](https://b-rodrigues.github.io/rixpress/)\n\n## The end\n\nContact me if you have questions:\n\n- bruno@brodrigues.co\n- Twitter: @brodriguesco\n- Mastodon: @brodriguesco@fosstodon.org\n- Blog: www.brodrigues.co\n- Book: www.raps-with-r.dev\n- rix: https://docs.ropensci.org/rix\n\n. . .\n\nThank you!\n",
    "supporting": [
      "index_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": null,
    "postProcess": false
  }
}